@using DTO.Models
@using MudBlazor
@rendermode InteractiveServer

<MudText Typo="Typo.h4" Class="mb-2">Coherent Voters</MudText>
<MudContainer MaxWidth="MaxWidth.Large" Class="p-4" Style="overflow: auto; max-height: 500px">
    <MudDivider Class="mb-3"/>

    <MudTable Items="@coherrentVoters" Hover="true" Breakpoint="Breakpoint.Sm">
        <ColGroup>
            <col style="width:100px;" />
            <col style="width:100px;" />
            <col style="width:100px;" />
            <col style="width:100px;" />
        </ColGroup>
        <HeaderContent>
            <MudTh>Members</MudTh>
            <MudTh>Percentage</MudTh>
            <MudTh>No Of Projects</MudTh>
            <MudTh></MudTh>
            <MudTh>Id</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="members">@context.number_of_voters</MudTd>
            <MudTd DataLabel="percentage">@context.fraction</MudTd>
            <MudTd DataLabel="numberOfProjects">@context.projects.Count</MudTd>
            <MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" ButtonType="ButtonType.Button" OnClick="@(() => ShowBtnPress(context))">@((context.ShowDetails == true)? "Hide" : "Show") Projects</MudButton></MudTd>
            <MudTd DataLabel="Id">@context.id.ToString().Substring(0,5)</MudTd>
            <!--<MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" ButtonType="ButtonType.Button" OnClick="@(() => ShowBtnPress(context))">@((context.ShowDetails == true)? "Hide" : "Show") Projects</MudButton></MudTd>-->
        </RowTemplate>
        <ChildRowContent>
            @if (context.ShowDetails)
            {
                <MudTr>
                    <td colspan="4">
                        <MudCard Elevation="0">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.body1">Projects Within Group</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent Class="pa-0">
                                <MudTable Items="@context.projects" Context="project" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                                    <ColGroup>
                                        <col />
                                        <col />
                                        <col style="width:200px;" />
                                    </ColGroup>
                                    <HeaderContent>
                                        <MudTh>Name</MudTh>
                                        <MudTh>Cost</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Project Name">@project.Name</MudTd>
                                        <MudTd DataLabel="Project Cost">@project.Cost</MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudCardContent>
                        </MudCard>
                    </td>
                </MudTr>
            }
        </ChildRowContent>
    </MudTable>
</MudContainer>

@code {
    [Parameter] public required List<CoherrentVoter> coherrentVoters { get; set; }
    [Inject] public required ISnackbar Snackbar { get; set; }
    

    private void ShowBtnPress(CoherrentVoter coVoter)
    {
        coVoter.ShowDetails = !coVoter.ShowDetails;
    } 
    

    private HashSet<CoherrentVoter> expandedRows = new();

    private void ToggleRow(CoherrentVoter voter)
    {
        if (!expandedRows.Add(voter))
            expandedRows.Remove(voter);
    }

    private bool IsExpanded(CoherrentVoter voter) => expandedRows.Contains(voter);
    
    protected override Task OnInitializedAsync()
    {
        coherrentVoters.Sort((a, b) => b.number_of_voters.CompareTo(a.number_of_voters)); 
        return base.OnInitializedAsync();
    }

}