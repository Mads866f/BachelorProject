@using MudBlazor
@using ApexCharts
@using AutoMapper.Internal
@using ApexCharts.Internal
@rendermode InteractiveServer

<MudPaper>
   <ApexChart TItem="SatPoint"
              Title="Order  Value"
              Options="options"
              Width="600"
              Height="600">
      <ApexPointSeries TItem="SatPoint"
                       Items="_satPoints"
                       Name="Average Value"
                       SeriesType="SeriesType.Radar"
                       XValue="@(e => e.Sat)"
                       YValue="@((e => (decimal)e.Value))"
                       OrderByDescending="e => e.X"/>
      @foreach (var covote in _coVotSatsList)
      {
      <ApexPointSeries TItem="SatPoint"
                       Items="covote.Item2"
                       Name="@covote.Item1"
                       SeriesType="SeriesType.Radar"
                       XValue="@(e => e.Sat)"
                       YValue="@((e => (decimal)e.Value))"
                       OrderByDescending="e => e.X"/>
      }
   </ApexChart>
</MudPaper>

@code {
   [Parameter] public required Dictionary<string,float> avgNumbers { get; set; }
   [Parameter] public required Dictionary<Guid,Dictionary<string ,float>> coNumbers {get; set; }
   [Parameter] public required bool Scale { get; set; }
   private List<SatPoint> _satPoints = [];
   private List<(string, List<SatPoint>)> _coVotSatsList = [];
   private ApexChartOptions<SatPoint> options = new ApexChartOptions<SatPoint>();

   protected override Task OnInitializedAsync()
   {
      if (Scale)
      {
         options.Tooltip = new()
         {
            Y = new TooltipY
            {
               Formatter = @"function(value) {
            var original = Math.pow(2,value);
            return original.toLocaleString(undefined, {maximumFractionDigits: 2});
        }"
            }
         };
      }

      return base.OnInitializedAsync();
   }

   public class SatPoint
   {
      public string Sat { get; set; }
      public float RealValue { get; set;}
      public float Value { get; set; }
   }


   protected override void OnParametersSet()
   {
      _satPoints.Clear();
      Func<float,float> scaler = ((e) => e);
      if (Scale)
      {
         scaler = ((e) => (float) Math.Log2(e));
      }
      foreach (var avgSat in avgNumbers)
      {
         _satPoints.Add(new SatPoint(){Sat = avgSat.Key,Value = scaler(avgSat.Value), RealValue = avgSat.Value});
      }

      foreach (var covoter in coNumbers)
      {
         var newCoSat = new List<SatPoint>();
         foreach (var coSat in covoter.Value)
         {
            newCoSat.Add(new SatPoint(){Sat = coSat.Key, Value = scaler(coSat.Value), RealValue = coSat.Value});
         }
         _coVotSatsList.Add((covoter.Key.ToString().Substring(0,5),newCoSat));
      }
      StateHasChanged();
   }
}


}