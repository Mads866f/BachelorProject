@using MudBlazor

<MudText Typo="Typo.h4">Analysis Numbers</MudText>
<MudDivider/>
<MudPaper>
   <MudChart Style="padding: 10px" ChartType="ChartType.Bar" ChartSeries="@charts" LegendPosition="Position.Bottom" XAxisLabels="@x_labels"  ></MudChart>
</MudPaper>

@code {
   [Parameter] public required Dictionary<string,float> avgNumbers { get; set; }
   [Parameter] public required Dictionary<Guid,Dictionary<string ,float>> coNumbers {get; set; }
   private List<ChartSeries> charts = [];
   private string[] x_labels;
   private ChartOptions _options;



   protected override Task OnInitializedAsync()
   {
      x_labels = avgNumbers.Keys.Select(k => k.Split(" ")[0]).ToArray();
      var avgValues = avgNumbers.Values.Select(p => (double)p).ToArray();
      var avgChartSeries = new ChartSeries() { Name = "Average", Data = avgValues };
      charts.Add(avgChartSeries);
      foreach (var coNum in coNumbers)
      {
         var dict = coNum.Value;
         var vals = dict.Values.Select(v => (double)v).ToArray();
         Console.WriteLine(vals[0]);
         var newSeries = new ChartSeries() { Name = coNum.Key.ToString().Substring(0, 5), Data = vals };
         charts.Add(newSeries);
      }

      return base.OnInitializedAsync();
   }

   protected override void OnParametersSet()
   {
      // 1) Clear old data
      charts.Clear();

      // 2) Rebuild X labels
      x_labels = avgNumbers.Keys.Select(k => k.Split(' ')[0]).ToArray();

      // 3) Build the "Average" series
      var avgValues = avgNumbers.Values.Select(v => (double)v).ToArray();
      charts.Add(new ChartSeries { Name = "Average", Data = avgValues });

      // 4) Build one series per co-number
      foreach (var coNum in coNumbers)
      {
         var vals = coNum.Value.Values.Select(v => (double)v).ToArray();
         charts.Add(new ChartSeries {
            Name = coNum.Key.ToString().Substring(0, 5),
            Data = vals
         });
      }
   }
}


}