@using MudBlazor
@using ApexCharts
@using AutoMapper.Internal
@using ApexCharts.Internal
@rendermode InteractiveServer

@if (loading)
{
   <MudText Typo="Typo.h1">LOADING</MudText>
}
else
{
   <MudPaper>
      <ApexChart TItem="SatPoint"
                 Title="Order  Value"
                 Options="options"
                 Width="600"
                 Height="600">
         <ApexPointSeries TItem="SatPoint"
                          Items="_satPoints"
                          Name="Average Value"
                          SeriesType="SeriesType.Radar"
                          XValue="@(e => e.Sat)"
                          YValue="@((e => 
                                     (e.Value is float d && d >= (double)decimal.MinValue && d <= (double)decimal.MaxValue) 
                                        ? (decimal)d 
                                        : 0m))"

                          OrderByDescending="e => e.X"/>
         @foreach (var covote in _coVotSatsList)
         {
            <ApexPointSeries TItem="SatPoint"
                             Items="covote.Item2"
                             Name="@covote.Item1"
                             SeriesType="SeriesType.Radar"
                             XValue="@(e => e.Sat)"
                             YValue="@((e => 
                                        (e.Value is float d && d >= (double)decimal.MinValue && d <= (double)decimal.MaxValue) 
                                           ? (decimal)d 
                                           : 0m))"
                             OrderByDescending="e => e.X"/>
         }
      </ApexChart>
   </MudPaper>
}

@code {
   [Parameter] public required Func<Task<Dictionary<string,float>>> avgNumbersFunction { get; set; }
   [Parameter] public required Func<Task<Dictionary<Guid,Dictionary<string,float>>>> coNumbersFunction {get; set; }
   [Parameter] public required bool Scale { get; set; }
   private Dictionary<string, float> avgNumbers = new Dictionary<string, float>();
   private Dictionary<Guid, Dictionary<string, float>> coNumbers = new Dictionary<Guid, Dictionary<string, float>>();
   private List<SatPoint> _satPoints = [];
   private List<(string, List<SatPoint>)> _coVotSatsList = [];
   private ApexChartOptions<SatPoint> options = new ApexChartOptions<SatPoint>();
   private bool loading = true;

   protected override async Task OnInitializedAsync()
   {
      SetScaleGraphic();

      var avgNumbersTask = avgNumbersFunction();
      var coNumbersTask = coNumbersFunction();
      await Task.WhenAll(avgNumbersTask,coNumbersTask);{
         avgNumbers = avgNumbersTask.Result;
         coNumbers = coNumbersTask.Result;
         loading = false;
      }
      await base.OnInitializedAsync();

   }
   
   private void SetScaleGraphic()
   {
      if (Scale)
      {
         options.Tooltip = new()
         {
            Y = new TooltipY
            {
               Formatter = @"function(value) {
            var original = Math.pow(2,value);
            return original.toLocaleString(undefined, {maximumFractionDigits: 2});
        }"
            }
         };
      }
   }
   
   public class SatPoint
   {
      public string Sat { get; set; }
      public float RealValue { get; set;}
      public float Value { get; set; }
   }


   protected override void OnParametersSet()
   {
      _satPoints.Clear();
      Func<float,float> scaler = ((e) => e);
      if (Scale)
      {
         scaler = ((e) => (float) Math.Log2(e));
      }
      foreach (var avgSat in avgNumbers)
      {
         _satPoints.Add(new SatPoint(){Sat = avgSat.Key,Value = scaler(avgSat.Value), RealValue = avgSat.Value});
      }

      foreach (var covoter in coNumbers)
      {
         var newCoSat = new List<SatPoint>();
         foreach (var coSat in covoter.Value)
         {
            newCoSat.Add(new SatPoint(){Sat = coSat.Key, Value = scaler(coSat.Value), RealValue = coSat.Value});
         }
         _coVotSatsList.Add((covoter.Key.ToString().Substring(0,5),newCoSat));
      }
      StateHasChanged();
   }
}


}