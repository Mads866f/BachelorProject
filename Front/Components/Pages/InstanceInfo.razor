@page "/electionInfo"
@rendermode InteractiveServer
@using DTO.Models
@using Front.Components.ElectionInfo.Dialogs
@using Front.Services.Elections
@using Front.Components.ElectionInfo

<PageTitle>Election Info</PageTitle>

<MudContainer>
    <SelectElection
        AllElections="allElections"
        CurrentElection="currentElection"
        UpdateElection="UpdateSelectedElection"></SelectElection>
    
    @if(currentElection is null) return;
    <CascadingValue Value="currentElection">
        <MudGrid>
            <MudItem xs="4">
                <MudStack>
                    <MudPaper>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudText Typo="Typo.h6">Election Name</MudText>
                            </MudItem>
                            <MudItem xs="12">
                                <MudText Typo="Typo.body1">@currentElection.Name</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                    <MudPaper>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudText Typo="Typo.h6">Budget</MudText>
                            </MudItem>
                            <MudItem xs="12">
                                <MudText Typo="Typo.body1">@currentElection.TotalBudget</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                    <MudPaper>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudText Typo="Typo.h6">Method</MudText>
                            </MudItem>
                            <MudItem xs="12">
                                <MudText Typo="Typo.body1">@currentElection.Model</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                    <MudPaper>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudText Typo="Typo.h6">BallotDesign</MudText>
                            </MudItem>
                            <MudItem xs="12">
                                <MudText Typo="Typo.body1">@currentElection.BallotDesign</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudStack>

            </MudItem>
            <MudItem xs="4">
                <MudGrid>
                    <MudItem xs="12">
                        <MudText Typo="Typo.h6">Voter Status</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudPaper>
                            <MudGrid>
                                <MudItem xs="10">
                                    <MudText Typo="Typo.body1">TYZ-567-YIU</MudText>
                                </MudItem>
                                <MudItem xs="2">
                                    <MudIcon Icon="@Icons.Material.Outlined.Circle" Color="Color.Error"/>
                                </MudItem>
                            </MudGrid>
                        </MudPaper>
                        <MudPaper>
                            <MudGrid>
                                <MudItem xs="10">
                                    <MudText Typo="Typo.body1">XYZ-ABC-123</MudText>
                                </MudItem>
                                <MudItem xs="2">
                                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success"/>
                                </MudItem>
                            </MudGrid>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudItem>
            <MudItem xs="4">
                <MudGrid>
                    <MudItem xs="12">
                        <MudButton Class="full-width-btn" OnClick="e => openPopup()">Add Project</MudButton>
                    </MudItem>
                    <MudItem xs="12">
                        <MudButton
                            Class="full-width-btn"
                            Color="Color.Primary"
                            OnClick="OpenVoterDialogAsync">
                            Add Voter
                        </MudButton>
                    </MudItem>
                    <MudItem xs="12">
                        <MudButton Class="full-width-btn">End Election</MudButton>
                    </MudItem>
                </MudGrid>

            </MudItem>

            <MudItem xs="12">
                <MudText Typo="Typo.h6">Projects</MudText>
            </MudItem>
            <MudItem xs="12">
                @if (open)
                {
                    <ProjectAddPopup election="currentElection"></ProjectAddPopup>
                }
            </MudItem>
            <MudItem xs="12">
                @if (open == false)
                {
                    <ProjectListView></ProjectListView>
                }
                else
                {
                    <ProjectListView></ProjectListView>
                }
            </MudItem>
        </MudGrid>
    </CascadingValue>
</MudContainer>


@code
{
    [Inject] public required IDialogService DialogService { get; set; }
    [Inject] IElectionsApiService ElectionsApiService { get; set; }
    private List<Election> allElections { get; set; }
    private Election currentElection;
    private string electionId = "";
    public bool open = false;

    private Task OpenVoterDialogAsync()
    {
        return DialogService.ShowAsync<InputVoteDialog>("Input Votes");
    }

    protected override async Task OnInitializedAsync()
    {
        await FetchAllElections();
    }

    private async Task FetchAllElections()
    {
        try
        {
            allElections = await ElectionsApiService.GetElections();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching elections: {ex.Message}");
        }
    }


    public void UpdateSelectedElection(Election newElection)
    {
        currentElection = newElection;
    }

    private void openPopup()
    {
        open = !open;
        StateHasChanged();
    }

    private async Task LoadElection()
    {
        Console.WriteLine("Load Election Started");
        if (electionId.Equals(""))
        {
            Console.WriteLine("ID empty");
            return;
        }
        else
        {
            Console.WriteLine("Getting election");
            var election = await ElectionsApiService.GetElection(electionId);
            Console.WriteLine(election.ToString());
            currentElection = election;


        }
    }
}
