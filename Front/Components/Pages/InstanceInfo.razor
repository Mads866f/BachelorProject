@page "/electionInfo"
@rendermode InteractiveServer
@using DTO.Models
@using Front.Components.ElectionInfo.Dialogs
@using Front.Services.Elections
@using Front.Components.ElectionInfo
@using Front.Services.Interface

<PageTitle>Election Info</PageTitle>

<MudContainer>
    <SelectElection
        AllElections="allElections"
        CurrentElection="_currentElection"
        UpdateElection="UpdateSelectedElection"></SelectElection>
    
    @if(_currentElection is null) return;
    <CascadingValue Value="_currentElection">
        <MudGrid>
            <MudItem xs="4">
                <MudStack>
                    <MudPaper>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudText Typo="Typo.h6">Election Name</MudText>
                            </MudItem>
                            <MudItem xs="12">
                                <MudText Typo="Typo.body1">@_currentElection.Name</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                    <MudPaper>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudText Typo="Typo.h6">Budget</MudText>
                            </MudItem>
                            <MudItem xs="12">
                                <MudText Typo="Typo.body1">@_currentElection.TotalBudget</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                    <MudPaper>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudText Typo="Typo.h6">Method</MudText>
                            </MudItem>
                            <MudItem xs="12">
                                <MudText Typo="Typo.body1">@_currentElection.Model</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                    <MudPaper>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudText Typo="Typo.h6">BallotDesign</MudText>
                            </MudItem>
                            <MudItem xs="12">
                                <MudText Typo="Typo.body1">@_currentElection.BallotDesign</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudStack>
                
            </MudItem>
            <MudItem xs="4">
                <MudStack>
                @foreach (var voter in _voters)
                {
                    <MudPaper>
                        <MudText Typo="Typo.body2">@voter.Id</MudText>
                    </MudPaper>
                } 
                </MudStack>
            </MudItem>
            <MudItem xs="4">
                <MudGrid>
                    <MudItem xs="12">
                        <MudButton Class="full-width-btn" OnClick="e => OpenPopup()">Add Project</MudButton>
                    </MudItem>
                    <MudItem xs="12">
                        <MudButton Class="full-width-btn" ButtonType="ButtonType.Button" OnClick="AddVoter">Add Voter</MudButton>
                    </MudItem>
                    <MudItem xs="12">
                        <MudButton Class="full-width-btn" ButtonType="ButtonType.Button" @onclick="EndElection">End Election</MudButton>
                    </MudItem>
                </MudGrid>

            </MudItem>

            <MudItem xs="12">
                <MudText Typo="Typo.h6">Projects</MudText>
            </MudItem>
            <MudItem xs="12">
                @if (open)
                {
                    <ProjectAddPopup election="_currentElection"></ProjectAddPopup>
                }
            </MudItem>
            <MudItem xs="12">
                @if (open == false)
                {
                    <ProjectListView></ProjectListView>
                }
                else
                {
                    <ProjectListView></ProjectListView>
                }
            </MudItem>
        </MudGrid>
    </CascadingValue>
</MudContainer>


@code
{
    [Inject] public required IDialogService DialogService { get; set; }
    [Inject] IElectionsApiService ElectionsApiService { get; set; }
    [Inject] IPbEngineApiService PbEngineApiService { get; set; }
    [Inject] IVotersApiService VotersApiService { get; set; }
    private List<Election> allElections { get; set; }
    private Election _currentElection;
    public bool open = false;
    private List<Voter> _voters = [];

    private Task OpenVoterDialogAsync()
    {
        return DialogService.ShowAsync<InputVoteDialog>("Input Votes");
    }

    protected override async Task OnInitializedAsync()
    {
        await FetchAllElections();
    }

    private async Task FetchAllElections()
    {
        try
        {
            allElections = await ElectionsApiService.GetElections();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching elections: {ex.Message}");
        }
    }


    public async Task UpdateSelectedElection(Election newElection)
    {
        _currentElection = newElection;
        await LoadElection();
    }

    private void OpenPopup()
    {
        open = !open;
        StateHasChanged();
    }

    private async Task LoadElection()
    {
        Console.WriteLine("Load Election Started");
        if (_currentElection.Id.ToString().Equals(""))
        {
            Console.WriteLine("ID empty");
            return;
        }
        else
        {
            Console.WriteLine("Getting election");
            var election = await ElectionsApiService.GetElection(_currentElection.Id.ToString());
            Console.WriteLine(election.ToString());
            _currentElection = election;
        }
        await LoadVoters();
    }

    private async Task EndElection()
    {
        var result = await PbEngineApiService.CalculateElection(_currentElection.Id.ToString());
        Console.WriteLine("RESULT FROM ELECTION!");
        foreach (var proj in result)
        {
            Console.WriteLine(proj.Name);
        }
        Console.WriteLine("____________");
    }

    private async Task AddVoter()
    {
        await VotersApiService.CreateVoter(_currentElection.Id.ToString());
        await LoadVoters();
    }

    private async Task LoadVoters()
    {
        _voters = await VotersApiService.GetVoters(_currentElection.Id.ToString());
        StateHasChanged();
    }
    
}
