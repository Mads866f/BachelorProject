@page "/electionResult/{ElectionId?}"
@rendermode InteractiveServer
@using Front.Services.Interface
@using DTO.Models
@using Front.Components.ElectionInfo
@using Front.Components.ResultPage
@using Front.Components.ResultPage.CoherrentVoter

<PageTitle>Election Results</PageTitle>

@if (_isLoading)
{
    <MudProgressCircular Indeterminate="true"/>
}
else if (_hasError)
{
    <MudAlert Severity="Severity.Error">Invalid election ID. Please select an election</MudAlert>
}
else if (_currentElectionResult is not null)
{
    <MudContainer>
        <MudTabs>
            @foreach (var result in _electionResults)
            {
                <MudTabPanel Text="@result.Id.ToString()">
                <CascadingValue Value="_currentElection">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudSpacer/>
                        </MudItem>
                        @{
                        }
                        <!-- Election Info - Left side -->
                            <ElectionInfoPanel
                                NewBallotFormat="@result.UsedBallot"
                                NewModelFormat="@result.UsedMethod"
                                NoOfProjects="@_currentElectionResult.SubmittedProjects.Count()"
                                NoOfVoters="@_voters.Count()"/>
                        <!-- Elected Project List View -->
                        <MudItem xs="8">
                            <CoherrentVoters coherrentVoters="_coherrentVoters"/>
                        </MudItem>
                        <MudItem xs = "10">
                            <AnalysisNumberDisplay avgNumbers="analysisNumbers" coNumbers="coVoteAnalNumbers" />
                        </MudItem>
                        <MudItem xs="2">
                            <SpendageChart electedProjects="_currentElectionResult.ElectedProjects" totalBudget="_currentElection.TotalBudget"/>
                        </MudItem>
                        <!-- Elected Project List View -->
                        <MudItem xs="12">
                            <MudText Typo="Typo.h4" Align="Align.Center">Elected Projects</MudText>
                            <ProjectListView Projects="_currentElectionResult.ElectedProjects"/>
                            <MudDivider/>
                        </MudItem>
                        <!-- Submitted Project List View -->
                        <MudItem>
                            <MudText Typo="Typo.h3" Align="Align.Center">All submitted projects</MudText>
                            <ProjectListView Projects="result.SubmittedProjects"/>
                        </MudItem>
                    </MudGrid>
                </CascadingValue>
                </MudTabPanel>
            }
        </MudTabs>
    </MudContainer>
}

@code {
    [Inject] public required IElectionResultsApiService ResultsApiService { get; set; }
    [Inject] public required IElectionsApiService ElectionsApiService { get; set; }
    [Inject] public required IVotersApiService VotersApiService { get; set;}
    [Inject] public required IPbEngineApiService PbEngineApiService { get; set; }
    [Inject] public required ISnackbar Snackbar { get; set; }

    [Parameter] public string? ElectionId { get; set; }

    private Election? _currentElection;
    private ElectionResult? _currentElectionResult;
    private List<ElectionResult> _electionResults = [];
    private List<Voter> _voters;
    private List<CoherrentVoter> _coherrentVoters = [];
    private Dictionary<string, float> analysisNumbers = new Dictionary<string, float>();
    private Dictionary<Guid, Dictionary<string, float>> coVoteAnalNumbers = new Dictionary<Guid, Dictionary<string, float>>();

    private bool _isLoading = true;
    private bool _hasError = false;


    protected override async Task OnInitializedAsync()
    {
        // Verify that the ElectionId from Url is valid
        if (string.IsNullOrWhiteSpace(ElectionId) || !Guid.TryParse(ElectionId, out var electionGuid))
        {
            _hasError = true;
            _isLoading = false;
            return;
        }

        // Verify that ID matches an election
        var election = await ElectionsApiService.GetElection(electionGuid);
        if (election is null)
        {
            _hasError = true;
            _isLoading = false;
            return;
        }

        _currentElection = election;

        _electionResults = await ResultsApiService.GetResultsByElectionId(electionGuid) ?? [];
        _currentElectionResult = _electionResults.FirstOrDefault();
        _voters = await VotersApiService.GetVotersByElectionId(electionGuid);
        CalculateCoherrentVoters();
        analysisNumbers = await PbEngineApiService.GetAvgSatisfactions(_currentElectionResult!);
        coVoteAnalNumbers = await PbEngineApiService.GetAvgSatisfactionCoherentGroups(_coherrentVoters, _currentElectionResult);
        _isLoading = false;
    }

    private void CalculateCoherrentVoters()
    {
        foreach (var voter in _voters)
        {
            Console.WriteLine("Voter:");
            voter.Votes.ForEach(c => Console.WriteLine(c.project.Name));
            var votedProjects = new List<Project>();
            foreach (var vote in voter.Votes)
            {
                Console.WriteLine("HERHE");
                if (vote.project is null)
                {
                    votedProjects.Add(new Project
                    {
                        Id = vote.Project_Id,
                        ElectionId = default,
                        Name = "NOT DEFINED",
                        Cost = -1
                    });
                    continue;
                }

                votedProjects.Add(vote.project);
            }

            var existed = false;
            foreach (var coVote in _coherrentVoters)
            {
                if (coVote.UpdateIfInGroup(votedProjects))
                {
                    existed = true;
                }
            }

            if (!existed)
            {
                var new_coVote = new CoherrentVoter() { number_of_voters = 1, projects = votedProjects, voters = _voters.Count, ShowDetails = false };
                Console.WriteLine("Created Coherrent Voter with:");
                votedProjects.ForEach(p => Console.WriteLine(p.Name));
                _coherrentVoters.Add(new_coVote);
            }
        }
    }
}
