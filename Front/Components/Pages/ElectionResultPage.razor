@page "/electionResult/{ElectionId?}"
@rendermode InteractiveServer
@using Front.Services.Interface
@using DTO.Models
@using Front.Components.ElectionInfo
@using Front.Components.ResultPage
@using Front.Components.ResultPage.CoherrentVoter
@using Front.Components.ElectionInfo.ActionPanel.Dialogs

<PageTitle>Election Results</PageTitle>

@if (_isLoading)
{
    <MudProgressCircular Indeterminate="true"/>
}
else if (_hasError)
{
    <MudAlert Severity="Severity.Error">Invalid election ID. Please select an election</MudAlert>
}
else if (_currentElectionResult is not null)
{
    <MudContainer>
        <MudTabs>
            @foreach (var result in _electionResults)
            {
                <MudTabPanel Text="@result.Id.ToString()">
                    <CascadingValue Value="_currentElection">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudSpacer/>
                            </MudItem>
                            @{
                            }
                            <!-- Election Info - Left side -->
                            <ElectionInfoPanel
                                NewBallotFormat="@result.UsedBallot"
                                NewModelFormat="@result.UsedMethod"
                                NoOfProjects="@_currentElectionResult.SubmittedProjects.Count()"
                                NoOfVoters="@_voters.Count()"/>
                            <!-- Elected Project List View -->
                            <MudItem xs="7">
                                <CoherentVotersForm Add="AddToCovote"/>
                                <CoherrentVoters coherrentVoters="_coherrentVoters.ToList()"/>
                            </MudItem>
                            <MudItem xs="12">
                                <MudText Typo="Typo.h4">Analysis Numbers</MudText>
                                <MudDivider/>
                                @if (reload)
                                {
                                    <MudGrid>
                                        <MudItem xs="6">
                                            <AnalysisNumberDisplay avgNumbers="analysisNumbers1" coNumbers="coVoteAnalNumbers1" Scale = "false"/>
                                        </MudItem>
                                        <MudItem xs="6">
                                            <AnalysisNumberDisplay avgNumbers="analysisNumbers2" coNumbers="coVoteAnalNumbers2" Scale = "true"/>
                                        </MudItem>
                                    </MudGrid>
                                }
                                else{
                                    <MudGrid>
                                        <MudItem xs="6">
                                            <AnalysisNumberDisplay avgNumbers="analysisNumbers1" coNumbers="coVoteAnalNumbers1" Scale = "false"/>
                                        </MudItem>
                                        <MudItem xs="6">
                                            <AnalysisNumberDisplay avgNumbers="analysisNumbers2" coNumbers="coVoteAnalNumbers2" Scale = "true"/>
                                        </MudItem>
                                    </MudGrid>
                                }
                            </MudItem>
                            <!-- Elected Project List View -->
                            <MudItem xs="6">
                                <MudText Typo="Typo.h4" Align="Align.Center">Elected Projects</MudText>
                                <ProjectListView Projects="_currentElectionResult.ElectedProjects"/>
                                <MudDivider/>
                            </MudItem>
                            <MudItem xs="6" Class="align-content-center" Style="height: max-content; width: max-content">
                                <SpendageChart electedProjects="_currentElectionResult.ElectedProjects" totalBudget="_currentElection.TotalBudget"/>
                            </MudItem>
                            <!-- Submitted Project List View -->
                            <MudItem>
                                <MudText Typo="Typo.h3" Align="Align.Center">All submitted projects</MudText>
                                <ProjectListView Projects="result.SubmittedProjects"/>
                            </MudItem>
                        </MudGrid>
                    </CascadingValue>
                </MudTabPanel>
            }
        </MudTabs>
    </MudContainer>
}

@code {
    [Inject] public required IElectionResultsApiService ResultsApiService { get; set; }
    [Inject] public required IElectionsApiService ElectionsApiService { get; set; }
    [Inject] public required IVotersApiService VotersApiService { get; set;}
    [Inject] public required IPbEngineApiService PbEngineApiService { get; set; }
    [Inject] public required IDialogService DialogService { get; set; }
    [Inject] public required ISnackbar Snackbar { get; set; }

    [Parameter] public string? ElectionId { get; set; }

    private Election? _currentElection;
    private ElectionResult? _currentElectionResult;
    private List<ElectionResult> _electionResults = [];
    private List<Voter> _voters;
    private HashSet<CoherrentVoter> _coherrentVoters = [];
    private HashSet<(int, int)> _wantedCoVoters = new HashSet<(int, int)>();
    private Dictionary<string, float> analysisNumbers1 = new Dictionary<string, float>();
    private Dictionary<string, float> analysisNumbers2 = new Dictionary<string, float>();
    private Dictionary<Guid, Dictionary<string, float>> coVoteAnalNumbers1 = new Dictionary<Guid, Dictionary<string, float>>();
    private Dictionary<Guid, Dictionary<string, float>> coVoteAnalNumbers2 = new Dictionary<Guid, Dictionary<string, float>>();
    private List<int> currentSats1 = [5,1,10,14,3];
    private List<int> currentSats2 = [2,7,16];

    private bool _isLoading = true;
    private bool _hasError = false;
    private bool reload = false;


    protected override async Task OnInitializedAsync()
    {
        // Verify that the ElectionId from Url is valid
        if (string.IsNullOrWhiteSpace(ElectionId) || !Guid.TryParse(ElectionId, out var electionGuid))
        {
            _hasError = true;
            _isLoading = false;
            return;
        }

        // Verify that ID matches an election
        var election = await ElectionsApiService.GetElection(electionGuid);
        if (election is null)
        {
            _hasError = true;
            _isLoading = false;
            return;
        }

        _currentElection = election;

        _electionResults = await ResultsApiService.GetResultsByElectionId(electionGuid) ?? [];
        _currentElectionResult = _electionResults.FirstOrDefault();
        analysisNumbers2 = await PbEngineApiService.GetAvgSatisfactions(_currentElectionResult, currentSats2);
        analysisNumbers1 = await PbEngineApiService.GetAvgSatisfactions(_currentElectionResult, currentSats1);
        Console.WriteLine("KEYS");
        foreach (var keyValuePair in analysisNumbers1)
        {
            Console.WriteLine($"KEY:{keyValuePair.Key}:VALUE{keyValuePair.Value}");
        }
        _voters = await VotersApiService.GetVotersByElectionId(electionGuid);
        _isLoading = false;
        reload = !reload;
    }

    public async void UpdateAnalNumbers(List<int> sats)
    {
        UpdateCoVotersSats();
    }

    public async void UpdateCoVotersSats()
    {
        foreach (var sat in currentSats1)
        {
            var newCoAnalNumbers = await PbEngineApiService.GetAvgSatisfactionCoherentGroups(_coherrentVoters.ToList(), _currentElectionResult, sat);
            foreach (var (key, value)in newCoAnalNumbers)
            {
                if (coVoteAnalNumbers1.ContainsKey(key))
                {
                    foreach (var dict in newCoAnalNumbers.Values)
                    {
                        coVoteAnalNumbers1[key][dict.Keys.First()] = dict.Values.First();
                    }
                }
                else
                {
                    coVoteAnalNumbers1[key] = value;
                }
            }
        }
        foreach (var sat in currentSats2)
        {
            var newCoAnalNumbers = await PbEngineApiService.GetAvgSatisfactionCoherentGroups(_coherrentVoters.ToList(), _currentElectionResult, sat);
            foreach (var (key, value)in newCoAnalNumbers)
            {
                if (coVoteAnalNumbers2.ContainsKey(key))
                {
                    foreach (var dict in newCoAnalNumbers.Values)
                    {
                        coVoteAnalNumbers2[key][dict.Keys.First()] = dict.Values.First();
                    }
                }
                else
                {
                    coVoteAnalNumbers2[key] = value;
                }
            }
        }

        reload = !reload;
    }
    
    public async void AddToCovote((int,int) toBeAdded)
    {
        var newAdd = _wantedCoVoters.Add(toBeAdded);
        if (newAdd)
        {
            var newCoVoters = await VotersApiService.GetCoherentVotersByElectionId(_currentElection.Id, toBeAdded.Item1, toBeAdded.Item2);
            foreach (var covot in newCoVoters)
            {
                var alreadyIn = _coherrentVoters.Where(x => x.number_of_voters == covot.number_of_voters && 
                   x.projects.Select(p=>p.Name).ToList().All(covot.projects.Select(p => p.Name).ToList().Contains) 
                    );
                Console.WriteLine("Covot:" + covot.projects.Count());
                if (!alreadyIn.Any())
                {
                    _coherrentVoters.Add(covot);
                }
                UpdateCoVotersSats();
            }
            await InvokeAsync(StateHasChanged);
            Snackbar.Add("Coherrent groups fully added",Severity.Success);
            reload = !reload;
        } 
    }
    
    
    

}
