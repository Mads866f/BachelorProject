@page "/electionResult/{ElectionId?}"
@using Front.Services.Interface
@using DTO.Models
@using Front.Services.Elections
@using Front.Components.ElectionInfo

<PageTitle>Election Results</PageTitle>

@if (_isLoading)
{
    <MudProgressCircular Indeterminate="true" />
}
else if (_hasError)
{
    <MudAlert Severity="Severity.Error">Invalid or missing election ID.</MudAlert>
}
else if (_currentElectionResult is not null)
{
    <CascadingValue Value="_currentElection">
        <MudGrid>
            <!-- Election Info - Left side -->
            <ElectionInfoPanel/>

            <!-- Elected Project List View -->
            <MudItem>
                <div>Elected Projects</div>
            </MudItem>
            <ProjectListView Projects="_currentElectionResult.ElectedProjects" />

            <!-- Submitted Project List View -->
            <MudItem>
                <div>All submitted projects</div>
            </MudItem>
            <ProjectListView Projects="_currentElectionResult.SubmittedProjects" />
        </MudGrid>
    </CascadingValue>
}
else
{
    <MudAlert Severity="Severity.Info">No results available for this election.</MudAlert>
}

@code {
    [Inject] public required IElectionResultsApiService ResultsApiService { get; set; }
    [Inject] public required IElectionsApiService ElectionsApiService { get; set; }

    [Parameter] public string? ElectionId { get; set; }

    private Election? _currentElection;
    private ElectionResult? _currentElectionResult;
    private List<ElectionResult> _electionResults = [];

    private bool _isLoading = true;
    private bool _hasError = false;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(ElectionId) || !Guid.TryParse(ElectionId, out var electionGuid))
        {
            _hasError = true;
            _isLoading = false;
            return;
        }

        var election = await ElectionsApiService.GetElection(electionGuid);
        if (election is null)
        {
            _hasError = true;
            _isLoading = false;
            return;
        }

        _currentElection = election;

        _electionResults = await ResultsApiService.GetResultsByElectionId(electionGuid) ?? [];
        _currentElectionResult = _electionResults.FirstOrDefault();

        _isLoading = false;
    }
}
