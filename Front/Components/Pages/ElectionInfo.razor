@page "/electionInfo/{ElectionId?}"
@rendermode InteractiveServer
@using System.Reflection.Metadata
@using DTO.Models
@using Front.Services.Elections
@using Front.Components.ElectionInfo
@using Front.Services.Interface
@using Front.Components.ElectionInfo.VoterView
@using Front.Components.ElectionInfo.ActionPanel
@using Front.Components.ElectionInfo.ActionPanel.Dialogs
@using Front.Services.Interface.Elections
@using Front.Utilities


<PageTitle>Election Info</PageTitle>

<MudContainer>
    <!-- Election Selector - TopBar-->
    <SelectElection
        AllElections="allElections"
        CurrentElection="_currentElection"
        UpdateElection="UpdateSelectedElection">
    </SelectElection>

    @if (_currentElection is null) return;
    
    <CascadingValue Value="_currentElection" >
        
        <MudGrid>
            <!-- Election Info - Left side-->
            <ElectionInfoPanel/>
            <!-- Voter view - Middle -->
            <ElectionVoterView
                Voters="_voters"/>
            <!-- Action panel - Right side -->
            <ActionPanel
                AddVoter="AddVoter"
                EndElection="EndElection"
                CreateProject="CreateProject"
                OpenCreateProjectDialog="OpenProjectDialogAsync"
                DownloadElection="DownloadElection"/>
            <!--Project List View - Bottom -->
            <ProjectListView
                Projects="_projects"/>
        </MudGrid>
    </CascadingValue>
</MudContainer>


@code
{
    [Inject] public required IDialogService DialogService { get; set; }
    [Inject] public required IElectionsApiService ElectionsApiService { get; set; }
    [Inject] public required IPbEngineApiService PbEngineApiService { get; set; }
    [Inject] public required IVotersApiService VotersApiService { get; set; }
    [Inject] public required IProjectsApiService ProjectsApiService { get; set; }
    [Inject] public required NavigationManager NavigationManager { get; set; }
    
    [Parameter] public string? ElectionId { get; set; }
    
    private List<Election> allElections { get; set; }
    private Election _currentElection;
    private List<Voter> _voters = [];
    private List<Project> _projects = [];



    private Task OpenProjectDialogAsync()
    {
        var parameters = new DialogParameters<CreateProjectDialog>
        {
            ["CreateProject"] = EventCallback.Factory.Create<CreateProjectModel>(this, CreateProject)
        };
        return DialogService.ShowAsync<CreateProjectDialog>("Create Project",parameters);
    }

    protected override async Task OnInitializedAsync()
    {
        await FetchAllElections();
        if (ElectionId is not null)
        {
            _currentElection = allElections.First(x => x.Id.ToString() == ElectionId);
        }
    }

    private async Task FetchAllElections()
    {
        try
        {
            allElections = await ElectionsApiService.GetElections();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching elections: {ex.Message}");
        }
    }

    private async Task LoadProjects()
    {
        _projects = await ProjectsApiService.GetProjectsWithElectionId(_currentElection.Id);
    }


    public async Task UpdateSelectedElection(Election newElection)
    {
        _currentElection = newElection;
        ElectionId = _currentElection.Id.ToString();
        await LoadElection();
    }


    private async Task LoadElection()
    {
        if (_currentElection.Id.ToString().Equals(""))
        {
            return;
        }
        else
        {
            var election = await ElectionsApiService.GetElection(_currentElection.Id);
            _currentElection = election;
        }
        await LoadVoters();
        await LoadProjects();
    }

    private async Task EndElection()
    {
        var result = await PbEngineApiService.CalculateElection(_currentElection.Id);
        foreach (var proj in result)
        {
            Console.WriteLine(proj.Name);
        }
        NavigationManager.NavigateTo("/electionResult/"+ _currentElection.Id);
    }

    private async Task AddVoter()
    {
        await VotersApiService.CreateVoter(_currentElection.Id);
        await LoadVoters();
    }

    private async Task LoadVoters()
    {
        _voters = await VotersApiService.GetVotersByElectionId(_currentElection.Id);
        StateHasChanged();
    }
    
    private async Task CreateProject(CreateProjectModel project)
    {
        project.ElectionId = _currentElection.Id;
        await ProjectsApiService.CreateProject(project);
        await LoadProjects();
        StateHasChanged();
    }

    public void DownloadElection()
    {
        var url = $"http://localhost:5253/download/"+_currentElection.Id; //TODO CHECK IF THIS IS CORRECT
        NavigationManager.NavigateTo(url,forceLoad:true);
    }


}
